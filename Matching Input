
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <set>
#include <map>
#include <cmath>

using namespace std;

///////////////////////////////////////////////////////////////////////////
// Function Declarations
void PrintData(const vector<vector<string>> &table);
void CountUniqueAttributes(const vector<vector<string>> &table);

/////////////////////////////////////////////////////////////////////////////

class Input
{
    vector<vector<string>> table;
    int T_row = 0;

public:
    Input(string f_name)
    {
        ifstream reader(f_name);
        if (reader.is_open())
        {
            string line;
            // Read until the end of file
            while (getline(reader, line))
            {
                vector<string> row;
                size_t pos = 0;
                while ((pos = line.find(',')) != string::npos)
                {
                    row.push_back(line.substr(0, pos));
                    line.erase(0, pos + 1);
                }
                row.push_back(line);  // Add the last field after the last comma
                table.push_back(row);
                T_row++;
            }
        }
        else
        {
            cout << "File does not exist ;" << endl;
        }
    }
    
    int GetRow() const
    {
        return T_row;
    }

    vector<vector<string>> GetTable() const
    {
        return table;
    }
};

void PrintData(const vector<vector<string>> &table)
{
    for (const auto& row : table)
    {
        for (const auto& elem : row)
        {
            cout << elem << ',';
        }
        cout << endl;
    }
}

void CountUniqueAttributes(const vector<vector<string>> &table)  
{
    if (table.empty()) return;

    // Use a set for each column to track unique attributes
    vector<set<string>> uniqueAttributes(table[0].size());  // Initialize sets for each column

    for (int row = 0 ; row < table.size() ; row++)
    {
        for (int col = 0 ; col < table[row].size() ; col++)
        {
            uniqueAttributes[col].insert(table[row][col]);  // Insert the element from the table into the set
        }
    }
    
    // Print unique counts for each column
    for (size_t col = 0; col < uniqueAttributes.size(); ++col)
    {
        cout << "Column " << col + 1 << " has " << uniqueAttributes[col].size() << " unique attributes." << endl;
    }
}

int main()
{
    // Read data from file
    Input input("Golf.dat");

    // Get the table data
    vector<vector<string>> table = input.GetTable();
    
    // Print the data
    cout << "Data in table:" << endl;
    PrintData(table);

    // Count unique attributes in each column
    cout << "\nUnique attribute counts in each column:" << endl;
    CountUniqueAttributes(table);

    return 0;
}
